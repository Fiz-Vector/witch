import java.nio.charset.StandardCharsets

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = getGitRev()
group = project.maven_group
evaluationDependsOn(':shared')

configurations {
    implementation.extendsFrom(library)
    shadow.extendsFrom(library)
}

String getGitRev() {
    String v = project.mod_version
    try {
        v = '1.' + 'git rev-list --all --count'.execute().text.trim() + '.0'
    } catch (Exception e) {
    }
    return v
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    library 'org.java-websocket:Java-WebSocket:1.5.3'
    compileOnly project(":shared")
}

shadowJar {
    configurations = [project.configurations.shadow]
}

processResources {
    inputs.property "version", project.version
    //Match your default argument
    String server = "ws://127.0.0.1:11451"
    String key = "good_key_qwq"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "server": Base64.getEncoder().encodeToString(server.getBytes(StandardCharsets.UTF_8)),
                "key": Base64.getEncoder().encodeToString(key.getBytes(StandardCharsets.UTF_8))
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

compileJava {
    source project(':shared').sourceSets.main.allSource
}

java {
    withSourcesJar()
}

remapJar {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile)
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
